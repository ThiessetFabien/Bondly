#!/usr/bin/env node

import { execSync } from 'child_process'
import { writeFileSync } from 'fs'
import { join } from 'path'

console.log('üîç Analyse compl√®te du code mort - D√©marrage...\n')

const results = {
  timestamp: new Date().toISOString(),
  oxlint: null,
  depcheck: null,
  unusedExports: null,
  summary: {
    totalIssues: 0,
    categories: {
      unusedVariables: 0,
      unusedImports: 0,
      unusedExports: 0,
      unusedDependencies: 0,
      deadCode: 0,
    },
  },
}

try {
  // 1. Analyse avec oxlint
  console.log('üìã 1. Analyse avec oxlint...')
  try {
    const oxlintOutput = execSync('pnpm run lint:dead-code', {
      encoding: 'utf8',
      stdio: 'pipe',
    })
    results.oxlint = { status: 'success', output: oxlintOutput }
    console.log('‚úÖ oxlint termin√©')
  } catch (error) {
    results.oxlint = { status: 'error', output: error.stdout || error.message }
    console.log('‚ö†Ô∏è  oxlint a d√©tect√© des probl√®mes')
  }

  // 2. Analyse des d√©pendances avec depcheck
  console.log('\nüì¶ 2. Analyse des d√©pendances inutilis√©es...')
  try {
    const depcheckOutput = execSync('pnpm run analyze:deps', {
      encoding: 'utf8',
      stdio: 'pipe',
    })
    results.depcheck = { status: 'success', output: depcheckOutput }
    console.log('‚úÖ depcheck termin√©')
  } catch (error) {
    results.depcheck = {
      status: 'error',
      output: error.stdout || error.message,
    }
    console.log('‚ö†Ô∏è  depcheck a d√©tect√© des d√©pendances inutilis√©es')
  }

  // 3. Analyse des exports inutilis√©s
  console.log('\nüì§ 3. Analyse des exports inutilis√©s...')
  try {
    const unusedExportsOutput = execSync('pnpm run analyze:unused-exports', {
      encoding: 'utf8',
      stdio: 'pipe',
    })
    results.unusedExports = { status: 'success', output: unusedExportsOutput }
    console.log('‚úÖ ts-unused-exports termin√©')
  } catch (error) {
    results.unusedExports = {
      status: 'error',
      output: error.stdout || error.message,
    }
    console.log('‚ö†Ô∏è  ts-unused-exports a d√©tect√© des exports inutilis√©s')
  }

  // 4. G√©n√©ration du rapport
  console.log('\nüìä 4. G√©n√©ration du rapport...')

  // Compter les probl√®mes
  if (results.oxlint?.status === 'error') {
    const oxlintIssues = (results.oxlint.output.match(/error|warning/g) || [])
      .length
    results.summary.totalIssues += oxlintIssues
    results.summary.categories.deadCode += oxlintIssues
  }

  if (results.depcheck?.status === 'error') {
    const depIssues = (results.depcheck.output.match(/Unused|Missing/g) || [])
      .length
    results.summary.totalIssues += depIssues
    results.summary.categories.unusedDependencies += depIssues
  }

  if (results.unusedExports?.status === 'error') {
    const exportIssues = (
      results.unusedExports.output.match(/unused export/g) || []
    ).length
    results.summary.totalIssues += exportIssues
    results.summary.categories.unusedExports += exportIssues
  }

  // Sauvegarder le rapport
  const reportPath = join(process.cwd(), 'dead-code-analysis.json')
  writeFileSync(reportPath, JSON.stringify(results, null, 2))

  console.log('‚úÖ Rapport g√©n√©r√©:', reportPath)

  // Afficher le r√©sum√©
  console.log('\nüìà R√âSUM√â:')
  console.log(`Total des probl√®mes d√©tect√©s: ${results.summary.totalIssues}`)
  console.log(`‚îú‚îÄ Code mort: ${results.summary.categories.deadCode}`)
  console.log(
    `‚îú‚îÄ D√©pendances inutilis√©es: ${results.summary.categories.unusedDependencies}`
  )
  console.log(
    `‚îî‚îÄ Exports inutilis√©s: ${results.summary.categories.unusedExports}`
  )

  if (results.summary.totalIssues === 0) {
    console.log('\nüéâ Aucun code mort d√©tect√© ! Votre code est propre.')
  } else {
    console.log(
      '\n‚ö†Ô∏è  Code mort d√©tect√©. Consultez le rapport pour plus de d√©tails.'
    )
  }
} catch (error) {
  console.error("‚ùå Erreur lors de l'analyse:", error.message)
  process.exit(1)
}
