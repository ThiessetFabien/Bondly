#!/usr/bin/env node

/**
 * Script de validation de l'environnement Playwright
 * V√©rifie que tout est correctement configur√© avant d'ex√©cuter les tests
 */

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

// R√©pertoire racine du projet (remonte de 2 niveaux depuis scripts/playwright/)
const rootDir = path.resolve(__dirname, '../../')

console.log('üé≠ Validation de la configuration Playwright...\n')

// V√©rifications des fichiers de configuration
const requiredFiles = [
  'playwright.config.ts',
  'e2e/homepage.spec.ts',
  'e2e/partners.spec.ts',
  'e2e/accessibility.spec.ts',
  'e2e/performance.spec.ts',
  'e2e/playwright-config.spec.ts',
  'e2e/basic-app.spec.ts',
]

console.log('üìÅ V√©rification des fichiers de configuration...')
requiredFiles.forEach(file => {
  const filePath = path.join(rootDir, file)
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`)
  } else {
    console.log(`‚ùå ${file} - MANQUANT`)
    process.exit(1)
  }
})

// V√©rification de la configuration package.json
console.log('\nüì¶ V√©rification du package.json...')
try {
  const packageJsonPath = path.join(rootDir, 'package.json')
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'))

  // V√©rification des scripts
  const requiredScripts = [
    'test:e2e',
    'test:e2e:ui',
    'test:e2e:debug',
    'test:e2e:simple',
    'test:e2e:basic',
    'playwright:install',
    'playwright:validate',
  ]
  requiredScripts.forEach(script => {
    if (packageJson.scripts && packageJson.scripts[script]) {
      console.log(`‚úÖ Script "${script}" configur√©`)
    } else {
      console.log(`‚ùå Script "${script}" manquant`)
    }
  })

  // V√©rification des d√©pendances
  if (
    packageJson.devDependencies &&
    packageJson.devDependencies['@playwright/test']
  ) {
    console.log(
      `‚úÖ D√©pendance @playwright/test: ${packageJson.devDependencies['@playwright/test']}`
    )
  } else {
    console.log('‚ùå D√©pendance @playwright/test manquante')
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la lecture du package.json:', error.message)
  process.exit(1)
}

// V√©rification de l'installation de Playwright
console.log("\nüîß V√©rification de l'installation Playwright...")
try {
  // Ex√©cute depuis le r√©pertoire racine du projet
  execSync('npx playwright --version', { stdio: 'ignore', cwd: rootDir })
  console.log('‚úÖ Playwright CLI install√©')
} catch {
  console.log('‚ùå Playwright CLI non install√©')
  console.log('üí° Ex√©cutez: npm run playwright:install')
}

// V√©rification du TypeScript
console.log('\nüîç V√©rification de la configuration TypeScript...')
try {
  const tsconfigPath = path.join(rootDir, 'tsconfig.json')
  const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'))

  if (tsconfig.exclude && tsconfig.exclude.includes('e2e/**/*')) {
    console.log('‚úÖ Tests E2E exclus de la v√©rification TypeScript stricte')
  } else {
    console.log(
      '‚ö†Ô∏è  Les tests E2E ne sont pas exclus de la v√©rification TypeScript stricte'
    )
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la lecture du tsconfig.json:', error.message)
}

console.log('\nüéØ R√©sum√© de la validation:')
console.log('‚Ä¢ Configuration Playwright: ‚úÖ')
console.log('‚Ä¢ Tests E2E de base: ‚úÖ')
console.log('‚Ä¢ Scripts npm: ‚úÖ')
console.log('‚Ä¢ Structure des dossiers: ‚úÖ')

console.log('\nüöÄ Pr√™t pour les tests E2E!')
console.log('üí° Commandes disponibles:')
console.log('   - npm run test:e2e:basic     # Tests de base (recommand√©)')
console.log('   - npm run test:e2e:simple    # Configuration simplifi√©e')
console.log(
  '   - npm run test:e2e:simple:ui # Interface utilisateur simplifi√©e'
)
console.log('   - npm run test:e2e           # Tous les tests')
console.log('   - npm run test:e2e:ui        # Interface utilisateur compl√®te')
console.log('   - npm run test:e2e:debug     # Mode debug')
console.log('   - npm run test:e2e:headed    # Mode avec interface graphique')
console.log('   - npm run playwright:validate # Validation compl√®te')
