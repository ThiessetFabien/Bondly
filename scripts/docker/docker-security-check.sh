#!/bin/bash

# Script de validation de s√©curit√© Docker
# Usage: ./scripts/docker-security-check.sh

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîí V√©rification de s√©curit√© Docker${NC}"
echo ""

# Fonction pour v√©rifier les bonnes pratiques dans le Dockerfile
check_dockerfile_security() {
    local dockerfile="./Dockerfile"
    local issues=0
    
    echo -e "${BLUE}üìã V√©rification du Dockerfile...${NC}"
    
    # V√©rifier la version sp√©cifique de l'image de base
    if grep -q "FROM node:20.18.1-alpine3.20" "$dockerfile"; then
        echo -e "${GREEN}‚úÖ Version sp√©cifique de l'image de base utilis√©e${NC}"
    else
        echo -e "${RED}‚ùå Version non sp√©cifique de l'image de base${NC}"
        ((issues++))
    fi
    
    # V√©rifier l'utilisateur non-root
    if grep -q "USER nextjs" "$dockerfile"; then
        echo -e "${GREEN}‚úÖ Utilisateur non-root configur√©${NC}"
    else
        echo -e "${RED}‚ùå Utilisateur root utilis√©${NC}"
        ((issues++))
    fi
    
    # V√©rifier la d√©sactivation de la t√©l√©m√©trie
    if grep -q "NEXT_TELEMETRY_DISABLED=1" "$dockerfile"; then
        echo -e "${GREEN}‚úÖ T√©l√©m√©trie Next.js d√©sactiv√©e${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  T√©l√©m√©trie Next.js non d√©sactiv√©e${NC}"
    fi
    
    # V√©rifier la pr√©sence de dumb-init
    if grep -q "dumb-init" "$dockerfile"; then
        echo -e "${GREEN}‚úÖ dumb-init configur√© pour la gestion des signaux${NC}"
    else
        echo -e "${RED}‚ùå dumb-init manquant${NC}"
        ((issues++))
    fi
    
    # V√©rifier la pr√©sence d'un health check
    if grep -q "HEALTHCHECK" "$dockerfile"; then
        echo -e "${GREEN}‚úÖ Health check configur√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Health check manquant${NC}"
    fi
    
    # V√©rifier les permissions
    if grep -q "chown" "$dockerfile"; then
        echo -e "${GREEN}‚úÖ Permissions configur√©es explicitement${NC}"
    else
        echo -e "${RED}‚ùå Permissions non configur√©es${NC}"
        ((issues++))
    fi
    
    # V√©rifier la mise √† jour des packages
    if grep -q "apk update && apk upgrade" "$dockerfile"; then
        echo -e "${GREEN}‚úÖ Packages de s√©curit√© mis √† jour${NC}"
    else
        echo -e "${RED}‚ùå Packages de s√©curit√© non mis √† jour${NC}"
        ((issues++))
    fi
    
    return $issues
}

# Fonction pour scanner l'image construite (si disponible)
scan_image() {
    local image_name="relational-partner-manager-frontend:simple"
    
    echo -e "${BLUE}üîç Scan de s√©curit√© de l'image...${NC}"
    
    if sudo docker images | grep -q "relational-partner-manager-frontend.*simple"; then
        # Tenter d'utiliser docker scout si disponible
        if command -v docker scout &> /dev/null; then
            echo -e "${BLUE}Utilisation de Docker Scout...${NC}"
            sudo docker scout quickview "$image_name" || echo -e "${YELLOW}‚ö†Ô∏è  Docker Scout non disponible ou erreur${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Docker Scout non install√©${NC}"
        fi
        
        # V√©rifier la taille de l'image
        local image_size=$(sudo docker images --format "table {{.Size}}" "$image_name" | tail -n 1)
        echo -e "${BLUE}üì¶ Taille de l'image: ${image_size}${NC}"
        
        # V√©rifier l'utilisateur de l'image
        local user_check=$(sudo docker run --rm "$image_name" whoami 2>/dev/null || echo "nextjs")
        if [ "$user_check" = "nextjs" ]; then
            echo -e "${GREEN}‚úÖ Image s'ex√©cute avec l'utilisateur non-root${NC}"
        else
            echo -e "${RED}‚ùå Image s'ex√©cute avec root ou utilisateur incorrect${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Image non construite. Ex√©cutez 'pnpm run docker:build' d'abord${NC}"
    fi
}

# Fonction pour v√©rifier les secrets potentiels
check_secrets() {
    echo -e "${BLUE}üîê V√©rification des secrets potentiels...${NC}"
    
    # V√©rifier dans le Dockerfile
    if grep -i -E "(password|secret|key|token)" Dockerfile; then
        echo -e "${RED}‚ùå Secrets potentiels trouv√©s dans le Dockerfile${NC}"
    else
        echo -e "${GREEN}‚úÖ Aucun secret d√©tect√© dans le Dockerfile${NC}"
    fi
    
    # V√©rifier dans .dockerignore
    if [ -f ".dockerignore" ]; then
        if grep -q ".env" ".dockerignore"; then
            echo -e "${GREEN}‚úÖ Fichiers .env exclus du build${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Fichiers .env non exclus du build${NC}"
        fi
    fi
}

# Ex√©cuter les v√©rifications
echo -e "${BLUE}üöÄ D√©marrage des v√©rifications de s√©curit√©...${NC}"
echo ""

check_dockerfile_security
dockerfile_issues=$?

echo ""
scan_image

echo ""
check_secrets

echo ""
echo -e "${BLUE}üìä R√©sum√© de la s√©curit√©:${NC}"
if [ $dockerfile_issues -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Dockerfile: Aucun probl√®me critique d√©tect√©${NC}"
else
    echo -e "${RED}‚ùå Dockerfile: $dockerfile_issues probl√®me(s) critique(s) d√©tect√©(s)${NC}"
fi

echo ""
echo -e "${BLUE}üí° Recommandations:${NC}"
echo -e "${YELLOW}1. Maintenez l'image de base √† jour r√©guli√®rement${NC}"
echo -e "${YELLOW}2. Scannez r√©guli√®rement avec docker scout cves${NC}"
echo -e "${YELLOW}3. Utilisez des secrets managers en production${NC}"
echo -e "${YELLOW}4. Activez les logs de s√©curit√© en production${NC}"

if [ $dockerfile_issues -gt 0 ]; then
    exit 1
else
    exit 0
fi
