#!/bin/bash
# =============================================================================
# SCRIPT D'INITIALISATION DOCKER POSTGRESQL 17.5 - BONDLY
# =============================================================================
# Usage: ./scripts/database/init-docker-postgresql.sh [production|development]
# =============================================================================

set -e  # Arr√™te en cas d'erreur

# Variables d'environnement
DB_NAME=${DB_NAME:-"bondly_prod"}
DB_USER=${DB_USER:-"bondly_user"}
DB_HOST=${DB_HOST:-"localhost"}
DB_PORT=${DB_PORT:-"5432"}

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction d'affichage
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# =============================================================================
# V√âRIFICATIONS PR√âLIMINAIRES
# =============================================================================

log "üöÄ Initialisation de PostgreSQL 17.5 pour Bondly..."

# V√©rifier si PostgreSQL 17.5 est install√©
if ! psql --version | grep -q "17\."; then
    error "PostgreSQL 17.x n'est pas install√© ou accessible"
fi

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    error "Docker n'est pas install√©"
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n'est pas install√©"
fi

success "‚úÖ Pr√©requis valid√©s"

# =============================================================================
# CONFIGURATION ENVIRONNEMENT
# =============================================================================

ENVIRONMENT=${1:-"development"}
log "üì¶ Mode: $ENVIRONMENT"

if [ "$ENVIRONMENT" = "production" ]; then
    log "üîí Configuration production activ√©e"
    COMPOSE_FILE="docker-compose.postgresql-17.yml"
    POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-$(openssl rand -base64 32)}
else
    log "üîß Configuration d√©veloppement activ√©e"
    COMPOSE_FILE="docker-compose.postgresql-17.yml"
    POSTGRES_PASSWORD="bondly_dev_2025"
fi

# =============================================================================
# CR√âATION DES R√âPERTOIRES
# =============================================================================

log "üìÅ Cr√©ation de la structure des r√©pertoires..."

mkdir -p data/postgres
mkdir -p data/backups
mkdir -p database/ssl
mkdir -p logs

success "‚úÖ R√©pertoires cr√©√©s"

# =============================================================================
# G√âN√âRATION DES CERTIFICATS SSL (PRODUCTION)
# =============================================================================

if [ "$ENVIRONMENT" = "production" ]; then
    log "üîê G√©n√©ration des certificats SSL..."
    
    if [ ! -f database/ssl/server.crt ]; then
        # G√©n√©ration de la cl√© priv√©e
        openssl genrsa -out database/ssl/server.key 2048
        
        # G√©n√©ration du certificat auto-sign√©
        openssl req -new -x509 -key database/ssl/server.key \
            -out database/ssl/server.crt -days 365 \
            -subj "/C=FR/ST=France/L=Paris/O=Bondly/CN=localhost"
        
        # Copie pour CA
        cp database/ssl/server.crt database/ssl/ca.crt
        
        # Permissions s√©curis√©es
        chmod 600 database/ssl/server.key
        chmod 644 database/ssl/server.crt database/ssl/ca.crt
        
        success "‚úÖ Certificats SSL g√©n√©r√©s"
    else
        warning "‚ö†Ô∏è  Certificats SSL existants utilis√©s"
    fi
fi

# =============================================================================
# CR√âATION DU FICHIER .ENV
# =============================================================================

log "‚öôÔ∏è  Cr√©ation du fichier .env..."

cat > .env.postgresql << EOF
# =============================================================================
# CONFIGURATION POSTGRESQL 17.5 - BONDLY
# =============================================================================

# Base de donn√©es
POSTGRES_DB=$DB_NAME
POSTGRES_USER=$DB_USER
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
POSTGRES_HOST=$DB_HOST
POSTGRES_PORT=$DB_PORT

# PgAdmin
PGADMIN_PASSWORD=admin_bondly_2025

# Environnement
NODE_ENV=$ENVIRONMENT
DATABASE_URL=postgresql://$DB_USER:$POSTGRES_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME

# Chiffrement (g√©n√©r√© automatiquement)
ENCRYPTION_KEY=$(openssl rand -base64 32)
JWT_SECRET=$(openssl rand -base64 64)

# Date de cr√©ation
CREATED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
EOF

success "‚úÖ Fichier .env cr√©√©"

# =============================================================================
# D√âMARRAGE DES SERVICES
# =============================================================================

log "üê≥ D√©marrage de PostgreSQL 17.5..."

# Arr√™t des conteneurs existants
docker-compose -f $COMPOSE_FILE down 2>/dev/null || true

# D√©marrage
POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker-compose -f $COMPOSE_FILE up -d postgres

# Attente que PostgreSQL soit pr√™t
log "‚è≥ Attente de la disponibilit√© de PostgreSQL..."
sleep 10

# V√©rification de la sant√©
max_attempts=30
attempt=1

while [ $attempt -le $max_attempts ]; do
    if docker-compose -f $COMPOSE_FILE exec -T postgres pg_isready -U $DB_USER -d $DB_NAME >/dev/null 2>&1; then
        success "‚úÖ PostgreSQL 17.5 est pr√™t!"
        break
    fi
    
    log "Tentative $attempt/$max_attempts..."
    sleep 2
    ((attempt++))
done

if [ $attempt -gt $max_attempts ]; then
    error "‚ùå PostgreSQL n'a pas d√©marr√© dans les temps"
fi

# =============================================================================
# V√âRIFICATION DE LA CONFIGURATION
# =============================================================================

log "üîç V√©rification de la configuration PostgreSQL 17.5..."

# Test de connexion
if docker-compose -f $COMPOSE_FILE exec -T postgres psql -U $DB_USER -d $DB_NAME -c "SELECT version();" >/dev/null 2>&1; then
    success "‚úÖ Connexion √† la base de donn√©es r√©ussie"
else
    error "‚ùå Impossible de se connecter √† la base"
fi

# V√©rification des extensions
log "üîå V√©rification des extensions..."
docker-compose -f $COMPOSE_FILE exec -T postgres psql -U $DB_USER -d $DB_NAME -c "
    SELECT extname, extversion 
    FROM pg_extension 
    WHERE extname IN ('uuid-ossp', 'pgcrypto', 'pg_stat_statements');
" 2>/dev/null && success "‚úÖ Extensions charg√©es"

# =============================================================================
# AFFICHAGE DES INFORMATIONS
# =============================================================================

echo ""
echo "üéâ PostgreSQL 17.5 configur√© avec succ√®s!"
echo ""
echo "üìã Informations de connexion:"
echo "   Host: $DB_HOST"
echo "   Port: $DB_PORT"
echo "   Database: $DB_NAME"
echo "   User: $DB_USER"
echo "   Password: [voir .env.postgresql]"
echo ""
echo "üåê Acc√®s PgAdmin (optionnel):"
echo "   URL: http://localhost:8080"
echo "   Email: admin@bondly.fr"
echo "   Commande: docker-compose -f $COMPOSE_FILE --profile admin up -d"
echo ""
echo "üìä Monitoring:"
echo "   Logs: docker-compose -f $COMPOSE_FILE logs -f postgres"
echo "   Stats: docker-compose -f $COMPOSE_FILE exec postgres psql -U $DB_USER -d $DB_NAME -c 'SELECT * FROM pg_stat_statements LIMIT 5;'"
echo ""
echo "üîß Commandes utiles:"
echo "   Arr√™t: docker-compose -f $COMPOSE_FILE down"
echo "   Sauvegarde: ./scripts/backup-postgresql.sh"
echo "   Migration: ./scripts/migrate-json-to-postgresql.sh"
echo ""

if [ "$ENVIRONMENT" = "production" ]; then
    warning "‚ö†Ô∏è  PRODUCTION: Sauvegardez le fichier .env.postgresql et les certificats SSL!"
fi

success "üöÄ PostgreSQL 17.5 pr√™t pour Bondly!"
