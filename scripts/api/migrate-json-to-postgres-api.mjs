/**
 * Script de migration des donn√©es JSON vers PostgreSQL (compl√©ment Sqitch)
 * Execute apr√®s: sqitch deploy
 * Usage: node scripts/migrate-json-to-postgres-api.mjs
 */

import { createRequire } from 'module'
const require = createRequire(import.meta.url)

import pkg from 'pg'
const { Client } = pkg
import dotenv from 'dotenv'

// Charger les variables d'environnement
dotenv.config()

// Importer les donn√©es JSON
import partnersData from '../src/data/partners.json' with { type: 'json' }
import metadataJson from '../src/data/metadata.json' with { type: 'json' }

async function migrateData() {
  const client = new Client({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    database: process.env.DB_NAME || 'bondly',
    user: process.env.DB_USER || process.env.USER || 'fabien',
    password: process.env.DB_PASSWORD || '',
  })

  try {
    console.log('üîå Connexion √† la base de donn√©es...')
    await client.connect()
    console.log('‚úÖ Connect√© √† PostgreSQL')

    // V√©rifier que Sqitch a √©t√© ex√©cut√©
    console.log('üîç V√©rification du d√©ploiement Sqitch...')
    try {
      const sqitchCheck = await client.query(
        'SELECT * FROM sqitch.changes ORDER BY committed_at DESC LIMIT 1'
      )
      if (sqitchCheck.rows.length === 0) {
        throw new Error('Aucune migration Sqitch trouv√©e')
      }
      console.log(
        `‚úÖ Derni√®re migration Sqitch: ${sqitchCheck.rows[0].change_id}`
      )
    } catch (error) {
      console.error("‚ùå Sqitch non d√©ploy√©. Ex√©cutez d'abord: sqitch deploy")
      process.exit(1)
    }

    // Nettoyer seulement les donn√©es des partenaires (les classifications de base sont d√©j√† en place)
    console.log('üóëÔ∏è  Suppression des donn√©es de partenaires existantes...')
    await client.query(
      'DELETE FROM partner_classifications WHERE partner_id IN (SELECT id FROM partners)'
    )
    await client.query('DELETE FROM partner_relations')
    await client.query(
      'DELETE FROM partners WHERE id NOT IN (SELECT uuid_nil())'
    )

    // Ajouter les classifications depuis les donn√©es JSON
    console.log('üìã Ajout des classifications depuis les donn√©es...')
    const allClassifications = new Set()

    // Classifications depuis les partenaires
    partnersData.partners.forEach(partner => {
      if (partner.classifications) {
        partner.classifications.forEach(classification => {
          allClassifications.add(classification.toLowerCase())
        })
      }
    })

    // Ins√©rer les nouvelles classifications (ON CONFLICT DO NOTHING pour √©viter les doublons)
    for (const classification of allClassifications) {
      await client.query(
        'INSERT INTO classifications (name) VALUES ($1) ON CONFLICT (name) DO NOTHING',
        [classification]
      )
    }
    console.log(`‚úÖ ${allClassifications.size} classifications trait√©es`)

    // Migrer les partenaires
    console.log('üë• Migration des partenaires...')
    let successCount = 0
    let errorCount = 0

    for (const partner of partnersData.partners) {
      try {
        // Ins√©rer le partenaire
        const partnerResult = await client.query(
          `
          INSERT INTO partners (
            firstname, lastname, job, email, phone, company, 
            rating, status, comment, created_at, updated_at
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
          RETURNING id
        `,
          [
            partner.firstname,
            partner.lastname,
            partner.job,
            partner.email || null,
            partner.phone || null,
            partner.company,
            partner.rating || null,
            partner.status || 'active',
            partner.comment || null,
            partner.createdAt || new Date().toISOString(),
            partner.updatedAt || new Date().toISOString(),
          ]
        )

        const partnerId = partnerResult.rows[0].id

        // Ins√©rer les classifications du partenaire
        if (partner.classifications && partner.classifications.length > 0) {
          for (const classification of partner.classifications) {
            await client.query(
              `
              INSERT INTO partner_classifications (partner_id, classification_name)
              VALUES ($1, $2)
            `,
              [partnerId, classification.toLowerCase()]
            )
          }
        }

        successCount++
        console.log(`‚úÖ ${partner.firstname} ${partner.lastname}`)
      } catch (error) {
        errorCount++
        console.error(
          `‚ùå Erreur pour ${partner.firstname} ${partner.lastname}:`,
          error.message
        )
      }
    }

    // Afficher les statistiques finales
    const stats = await client.query(`
      SELECT 
        (SELECT COUNT(*) FROM partners) as total_partners,
        (SELECT COUNT(*) FROM classifications) as total_classifications,
        (SELECT COUNT(*) FROM partner_classifications) as total_associations
    `)

    console.log('\nüìä Statistiques de migration:')
    console.log(`   ‚Ä¢ Partenaires migr√©s: ${successCount}`)
    console.log(`   ‚Ä¢ Erreurs: ${errorCount}`)
    console.log(
      `   ‚Ä¢ Total partenaires en base: ${stats.rows[0].total_partners}`
    )
    console.log(
      `   ‚Ä¢ Total classifications: ${stats.rows[0].total_classifications}`
    )
    console.log(`   ‚Ä¢ Total associations: ${stats.rows[0].total_associations}`)

    if (errorCount === 0) {
      console.log('\nüéâ Migration termin√©e avec succ√®s!')
    } else {
      console.log(`\n‚ö†Ô∏è  Migration termin√©e avec ${errorCount} erreur(s)`)
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
    process.exit(1)
  } finally {
    await client.end()
  }
}

// V√©rifier que la base de donn√©es est accessible
async function checkDatabase() {
  const client = new Client({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    database: process.env.DB_NAME || 'bondly',
    user: process.env.DB_USER || process.env.USER || 'fabien',
    password: process.env.DB_PASSWORD || '',
  })

  try {
    await client.connect()

    // V√©rifier que les tables existent
    const result = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('partners', 'classifications', 'partner_classifications')
    `)

    if (result.rows.length < 3) {
      throw new Error(
        "Les tables ne sont pas cr√©√©es. Ex√©cutez d'abord les migrations Sqitch."
      )
    }

    console.log('‚úÖ Base de donn√©es accessible et tables pr√©sentes')
    await client.end()
    return true
  } catch (error) {
    console.error('‚ùå Probl√®me avec la base de donn√©es:', error.message)
    console.log('\nüí° Assurez-vous que:')
    console.log('   ‚Ä¢ PostgreSQL est d√©marr√©')
    console.log("   ‚Ä¢ Les variables d'environnement sont correctes")
    console.log('   ‚Ä¢ Les migrations Sqitch ont √©t√© ex√©cut√©es')
    await client.end()
    return false
  }
}

// Ex√©cution principale
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('üöÄ D√©marrage de la migration JSON vers PostgreSQL\n')

  const dbOk = await checkDatabase()
  if (dbOk) {
    await migrateData()
  } else {
    process.exit(1)
  }
}
